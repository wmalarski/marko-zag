import type { MachineSrc } from "@zag-js/core";
import type { HookOptions, RSA, SSS, SEO, SAEO } from "./types";
export interface Input<TC extends RSA, TS extends SSS, TE extends SEO = SAEO> {
  machine: MachineSrc<TC, TS, TE>;
  options?: HookOptions<TC, TS, TE>;
}

<const/{ actions, state: hydratedState, context }=(input.options ?? {})/>
<!-- <effect() {
  console.log("use-service-effect1", {
    actions,
    hydratedState,
    context,
    machine: input.machine,
    options: input.options,
  });
}/> -->

<let/service=(() => {
  const _machine =
    typeof input.machine === "function" ? input.machine() : input.machine;
  const result = context ? _machine.withContext(context) : _machine;

  console.log("use-service-const/service", {
    _machine,
    context,
    service: result,
  });

  return result;
})()/>

<effect() {
  service.start(hydratedState);
  if (service.state.can("SETUP")) {
    service.send("SETUP");
  }
  return () => {
    service.stop();
  };
}/>
<!-- <lifecycle
  onMount() {
    // console.log("use-service-onMount", {
    //   service,
    //   hydratedState,
    // });
    // service.start(hydratedState);
    // if (service.state.can("SETUP")) {
    //   service.send("SETUP");
    // }
  }
  onDestroy() {
    // console.log("use-service-onDestroy", {
    //   service,
    // });
    // service.stop();
  }
/> -->

<effect() {
  // const contextValue = typeof context === "function" ? context() : context;
  service.setContext(context);
  // console.log("use-service-effect2", {
  //   service,
  //   contextValue,
  // });
}/>

<effect() {
  //   console.log("use-service-effect3-pre", {
  //   service,
  //   actions,
  // });
  service.setOptions({ actions });
  // console.log("use-service-effect3-post", {
  //   service,
  //   actions,
  // });
}/>

<return=service/>
