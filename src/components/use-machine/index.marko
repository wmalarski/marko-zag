import type { MachineSrc } from "@zag-js/core";
import type { HookOptions } from "../use-service/types";
export interface Input {
  machine: MachineSrc<any, any, any>;
  options?: HookOptions<any, any, any>;
}

<use-service/service machine=input.machine options=input.options/>

<let/machineState=service.getState()/>

<let/unsubscribe=(
  () => {
    //
  }
)/>

<lifecycle
  onMount() {
    // console.log("use-machine-onMount", {
    //   service,
    //   machine: input.machine,
    //   options: input.options,
    // });
    unsubscribe = service.subscribe((nextState) => {
      // reconcile???;

      // console.log("use-machine-subscribe", {
      //   machineState,
      //   nextState,
      // });

      machineState = nextState;
    });
  }
  onDestroy() {
    // console.log("use-machine-onDestroy", {
    //   unsubscribe,
    // });
    unsubscribe();
  }
/>

<return=([machineState, service.send, service] as const)/>
