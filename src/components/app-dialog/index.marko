import * as dialog from "@zag-js/dialog"
import type { ButtonClassProps } from "../app-button/recipes";
import { normalizeProps } from "../normalize-props";
import { twCx } from "../../utils/twCva";
import styles from "./app-dialog.module.css";
export type Input = (dialog.Context & {
  close?: Marko.AttrTag<Marko.Input<"button"> & ButtonClassProps>;
  description?: Marko.AttrTag<Marko.Input<"p">>;
  renderBody: Marko.Body;
  title?: Marko.AttrTag<Marko.Input<"h2">>;
  trigger: Marko.AttrTag<Marko.Input<"button"> & ButtonClassProps>;
}
);
<const/machine=(() => dialog.machine({
  id: input.id,
  "aria-label": input["aria-label"],
  closeOnEscapeKeyDown: input.closeOnEscapeKeyDown,
  closeOnInteractOutside: input.closeOnInteractOutside,
  dir: input.dir,
  finalFocusEl: input.finalFocusEl,
  getRootNode: input.getRootNode,
  ids: input.ids,
  initialFocusEl: input.initialFocusEl,
  modal: input.modal,
  onEscapeKeyDown: input.onEscapeKeyDown,
  onFocusOutside: input.onFocusOutside,
  onInteractOutside: input.onInteractOutside,
  onOpenChange: input.onOpenChange,
  onPointerDownOutside: input.onPointerDownOutside,
  open: input.open,
  preventScroll: input.preventScroll,
  restoreFocus: input.restoreFocus,
  role: input.role,
  trapFocus: input.trapFocus,
}))/>

<use-machine/[machineState, send] machine=(machine)/>
<const/api=dialog.connect(machineState, send, normalizeProps)/>

<return=api/>

<app-button ...api.triggerProps ...input.trigger>
  <${input.trigger.renderBody}/>
</app-button>

<if=api.isOpen>
  <portal>
    <div ...api.backdropProps class=styles.backdrop />
    <div ...api.positionerProps class=styles.positioner>
      <div ...api.contentProps class=styles.content>
        <if=input.title>
          <h2 ...api.titleProps ...input.title class=twCx(styles.title, input.title.class)>
            <${input.title.renderBody}/>
          </h2>
        </if>
        <if=input.description>
          <p ...api.descriptionProps ...input.description class=twCx(styles.description, input.description.class)>
            <${input.description.renderBody}/>
          </p>
        </if>
        <${input.renderBody}/>
        <if=input.close>
          <button ...api.closeTriggerProps ...input.close class=twCx(styles.close, input.close.class)>
            <${input.close.renderBody}/>
          </button>
        </if>
      </div>
    </div>
  </portal>
</if>
