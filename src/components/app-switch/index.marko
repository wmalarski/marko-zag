import * as zagSwitch from "@zag-js/switch"
import { normalizeProps } from "../normalize-props";
import styles from "./app-switch.module.css";
export type Input = (zagSwitch.Context & {
  renderBody: Marko.Body;
}
);

<const/machine=(() => zagSwitch.machine(input))/>

<use-machine/[machineState, send] machine=(machine as any)/>

<const/api=zagSwitch.connect(machineState as any, send, normalizeProps)/>

<return=api/>

<effect() {
  console.log(api.rootProps);
} />

<label class=styles.root ...api.rootProps onPointerup(event: any) {
  console.log("onPointerup", event);
  return api.rootProps.onPointerup(event);
}>
  <input class=styles.input ...api.hiddenInputProps />
  <span class=styles.control ...api.controlProps>
    <span class=styles.thumb ...api.thumbProps />
  </span>
  <span class=styles.label ...api.labelProps>
    <${input.renderBody}/>
  </span>
</label>

<button onClick() {
  api.toggleChecked();  
}>
  Toggle
</button>